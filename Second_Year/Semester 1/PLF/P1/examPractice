% 1. a. Write a predicate to determine the lowest common multiple of a list formed from integer numbers.

% gcd(A,B) = {
%     A, if B = 0
%     B, IF A = 0
%     gcd(A-B,B), if A >= B
%     gcd(A,B-A), A < B
% }

gcd(A, 0, A):-!.
gcd(0, B, B):-!.
gcd(A, B, R):-
    A >= B,
    A1 is A - B,
    gcd(A1, B, R),!.
gcd(A, B, R):-
    A < B,
    B1 is B - A,
    gcd(A, B1, R),!.

lcm(A,B,R):-
    gcd(A,B,RGCD),
    R is A * B / RGCD,!.

lcmList([E], E).
lcmList([H|T], R):-
    lcmList(T, R1),
    lcm(H, R1, R).

% b. Write a predicate to add a value v after 1-st, 2-nd, 4-th, 8-th, ... element in a list.

% insertPos(l1,..,ln, v, pos, index) = {
%     [], l null
%     l1 + insertPos(l2,..,ln,v,pos,index + 1), pos != index
%     l1 + v + insertPos(l2,..,ln,v,pos*2,index+1), pos = index
% }

insertPos([],_,_,_,[]):-!.
insertPos([H|T],V,P,I,[H|R]):-
    P =\= I,
    I1 is I + 1,
    insertPos(T,V,P,I1,R),!.
insertPos([H|T],V,P,I,[H, V | R]):-
    P == I,
    I1 is I + 1,
    P2 is P * 2,
    insertPos(T,V,P2,I1,R).

% 2.a. Write a predicate to remove all occurrences of a certain atom from a list.
% b.Define a predicate to produce a list of pairs (atom n) from an initial list of atoms. In this initial list atom has n occurrences.
% Eg.:numberatom([1, 2, 1, 2, 1, 3, 1], X) => X =[[1, 4], [2, 2], [3, 1]].

% removeOcc(l1,..,ln,e) = {
%     removeOcc(l2,..,ln),l1 = e
%     l1 @ removeOcc(l2,..,ln),l1 != e
% }

removeOcc([],_,[]):-!.
removeOcc([H|T], E, R):-
    H =:= E,
    removeOcc(T,E,R),!.
removeOcc([H|T],E,[H|R]):-
    H =\= E,
    removeOcc(T,E,R),!.

% b. countOcc(l1,..,ln,e) = {
%     0, l vida
%     1 + countOcc(l2,...,ln) ,l1 = e
%     countOcc(l2,..,ln), l1 != e
% }

countOcc([],_,0):-!.
countOcc([H|T],E,R):-
    H =:= E,
    countOcc(T,E,R1),
    R is R1 + 1.
countOcc([H|T],E,R):-
    H =\= E,
    countOcc(T,E,R).

% numberatom(l) = {
%     [], l vida
%     [l1, countOcc(l1)] @ numberatom(removeOcc(l2,..,ln,l1))
% }

numberatom([],[]):-!.
numberatom([H|T], [[H, RC] | R]):-
    countOcc([H|T],H,RC),
    removeOcc(T,H,RR),
    numberatom(RR, R),!.

% 3.a. Define a predicate to remove from a list all repetitive elements. 
% Eg.: l=[1,2,1,4,1,3,4] => l=[2,3]
% b. Remove all occurrence ofa maximum value from a list on integer numbers.

appears([H|T],E):- H =\= E,!,
    appears(T,E).
appears([H|_],E):-
    H =:= E, !.

% removeRepetitive(l1,..,ln) = {
%     [], l vida
%     removeRepetitive(l2,..,ln), appears(l2,..,ln,l1)
%     l1 @ removeRepetitive(l2,..,ln), else
% }

removeRepetitive([],[]):-!.
removeRepetitive([H|T],R):-
    appears(T,H),!,
    removeRepetitive(T,R).
removeRepetitive([H|T],[H|R]):-
    \+ appears(T, H),
    removeRepetitive(T,R).

% b)

maxi(A,B,A):- A >= B.
maxi(A,B,B):- A < B.

maximList([H],H):-!.
maximList([H|T],R):-
    maximList(T,RT),
    maxi(H,RT,R).

removeMaxim(L,R):-
    maximList(L, RL),
    removeOcc(L, RL,R).

% 12. a. Write a predicate to substitute in a list a value with all the elements of another list.
% b. Remove the n-th element of a list.

% append(l1,...,ln,b) = {
%     b, l vida
%     l1 @ append(l2,..,ln,b), else
% }

append([],L,L):-!.
append([H|T], L, [H|R]):- append(T,L,R).

% substituteElem(l1,...,ln, elem,list) = {
%     [], l vida
%     substituteElem(append(list,l2,..,ln), elem, list), l1 =  elem
%     l1 @ substituteElem(l2,..,ln,elem,list), l1 != elem
% }

substituteElem([],_,_, []).
substituteElem([H|T],E,L,R):-
    H =:= E,
    !,
    append(L, T, RL),
    substituteElem(RL, E, L, R).
substituteElem([H|T], E, L, [H|R]):-
    H =\= E,
    substituteElem(T,E,L,R).

% b. removeNth(l1,..,ln,n,pos) = {
%     [], l vida
%     removeNth(l2,...,ln,n,pos+1), pos = n
%     l1 @ removeNth(l2,..,ln,n,pos+1), pos != n
% }

removeNth([],_,_,[]):-!.
removeNth([_|T],N,P,R):-
    P =:= N,
    !,
    P1 is P + 1,
    removeNth(T,N,P1,R).
removeNth([H|T],N,P,[H|R]):-
    P =\= N,
    P1 is P + 1,
    removeNth(T,N,P1,R).

    
% 13.
% a. Given a linear numerical list write a predicate to remove all sequences of consecutive values.
% Eg.: remove([1, 2, 4, 6, 7, 8, 10], L) will produce L=[4, 10].
% b. For a heterogeneous list, formed from integer numbers and list of numbers;  write a predicate to delete from every sublist all sequences of consecutive values.
% Eg.: [1, [2, 3, 5], 9, [1, 2, 4, 3, 4, 5, 7, 9], 11, [5, 8, 2], 7] =>
% [1, [5], 9, [4, 7, 9], 11, [5, 8, 2], 7] 

% a

% removeConsecutives(l1,...,ln) = {
%     [], l vida
%     [l1], n = 1
%     [] , n = 2 and l2 = l1 + 1
%     removeConsecutives(l2,..,ln), l2 = l1 + 1 and l3 = l2 + 1
%     removeConsecutives(l3,...,ln), l2 = l1 + 1 and l3 != l2 + 1
%     l1 + removeConsecutives(l2,..,ln), l2 != l1 + 1
% }

removeConsecutives([],[]):-!.
removeConsecutives([E], [E]).
removeConsecutives([H, H1], []):- H1 =:= H + 1.
removeConsecutives([H1, H2], [H1, H2]):- H2 =\= H1 + 1.
removeConsecutives([H1, H2, H3 | T], R):-
    H2 =:= H1 + 1,
    H3 =:= H2 + 1,
    removeConsecutives([H2, H3 | T],R).
removeConsecutives([H1, H2, H3 | T], R):-
    H2 =:= H1 + 1,
    H3 =\= H2 + 1,
    removeConsecutives([H3 | T], R).
removeConsecutives([H1, H2, H3 | T], [H1 | R]):-
    H2 =\= H1 + 1,
    removeConsecutives([H2,H3 | T], R).

% removeConsecHeterList (l1,..,ln) = {
%     [], l null
%     removeConsecutives(l1) @ removeConsecHeterList(l2,...,ln), is_list(l1)
%     l1 @ removeConsecHeterList(l2,..,ln), else
% }

removeConsecHeterList([],[]):-!.
removeConsecHeterList([H|T],[R1|R]):-
    is_list(H),
    !,
    removeConsecutives(H,R1),
    removeConsecHeterList(T,R).
removeConsecHeterList([H|T],[H|R]):-
    removeConsecHeterList(T,R).