     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, printf, fscanf
     8                                  import exit msvcrt.dll   
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import fscanf msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 70726F622E74787400          nume_fisier db "prob.txt", 0 ;numele fisierului
    17 00000009 722B00                      mod_acces db "r+", 0    ; modul de acces
    18 0000000C 256400                      format_dec db "%d", 0   ; formatul pt decimal
    19 0000000F 257300                      format_str db "%s", 0   ; formatul pt string
    20 00000012 256300                      format_chr db "%c", 0   ; formatul pt character
    21 00000015 FFFFFFFF                    descriptor_fis dd -1    ; descriptorul fisierului   
    22 00000019 4E756D6172756C206C-         text_litere db "Numarul literelor mari este: ", 0
    22 00000022 69746572656C6F7220-
    22 0000002B 6D6172692065737465-
    22 00000034 3A2000             
    23 00000037 4E756D6172756C2063-         text_cifre db "Numarul cifrelor este: ", 0
    23 00000040 696672656C6F722065-
    23 00000049 7374653A2000       
    24 0000004F 2000                        spatiu db " ", 0
    25 00000051 00000000                    chr dd 0                ; variabila in care va fi stocat caracterul citit
    26 00000055 00000000                    majuscule dd 0          ; variabila in care vom numara cate litere mari am gasit
    27 00000059 00000000                    cifre dd 0              ; variabila in care vom numara cate cifre am gasit
    28                                      
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; Se citesc dintr-un fisier caractere, pana la intalnirea caracterului *. Sa se afiseze la consola numarul literelor mari, urmat de numarul cifrelor citite.
    33                                          
    34                                          ; deschidem fisierul din care citim
    35 00000000 68[09000000]                    push dword mod_acces
    36 00000005 68[00000000]                    push dword nume_fisier
    37 0000000A FF15[00000000]                  call [fopen]
    38 00000010 83C408                          add esp, 8
    39                                          
    40                                          ;verificam daca fisierul a fost deschis corect
    41 00000013 83F800                          cmp eax, 0
    42 00000016 0F84C1000000                    je final
    43                                          
    44 0000001C A3[15000000]                    mov [descriptor_fis], eax
    45                                          
    46                                          Repeta:
    47                                              ; citim cate un caracter din fisier
    48 00000021 68[51000000]                        push dword chr 
    49 00000026 68[12000000]                        push dword format_chr
    50 0000002B FF35[15000000]                      push dword [descriptor_fis]
    51 00000031 FF15[00000000]                      call [fscanf]
    52 00000037 83C40C                              add esp, 12
    53                                              
    54                                              ; verificam daca caracterul citit este '*'. iar daca da iesim din loop
    55 0000003A A1[51000000]                        mov eax, [chr]
    56 0000003F 83F82A                              cmp eax, '*'
    57 00000042 742C                                je final_loop
    58                                              
    59                                              ; verificam daca caracterul citit este litera_mare
    60 00000044 83F841                              cmp eax, 'A'
    61 00000047 7307                                jae next_lit
    62                                              
    63                                              ; verificam daca caracterul citit este litera_mare
    64 00000049 83F830                              cmp eax, '0'
    65 0000004C 7312                                jae next_cif
    66                                              
    67                                              ; daca nu este nici litera mare, nici cifra continuam sa citim caractere
    68 0000004E EB1E                                jmp continua
    69                                              
    70                                              next_lit:
    71 00000050 83F85A                              cmp eax, 'Z'
    72 00000053 7602                                jbe litera_mare
    73 00000055 7717                                ja continua
    74                                              
    75                                              ; daca este litera mare incrementam variabila majuscule 
    76                                              litera_mare:
    77 00000057 8305[55000000]01                    add [majuscule], dword 1
    78 0000005E EB0E                                jmp continua
    79                                              
    80                                              next_cif:
    81 00000060 83F839                              cmp eax, '9'
    82 00000063 7602                                jbe cifra
    83 00000065 7707                                ja continua
    84                                              
    85                                              ; daca este cifra incrementam variabila cifre
    86                                              cifra:
    87 00000067 8305[59000000]01                    add [cifre], dword 1
    88                                              
    89                                              continua:
    90 0000006E EBB1                            jmp Repeta
    91                                          final_loop:
    92                                          
    93                                          ; afisam nr de litere mari
    94 00000070 68[19000000]                    push dword text_litere
    95 00000075 68[0F000000]                    push dword format_str
    96 0000007A FF15[00000000]                  call [printf]
    97 00000080 83C408                          add esp, 8
    98                                          
    99 00000083 FF35[55000000]                  push dword [majuscule]
   100 00000089 68[0C000000]                    push dword format_dec
   101 0000008E FF15[00000000]                  call [printf]
   102 00000094 83C408                          add esp, 8
   103                                          
   104                                          ; afisam un spatiu
   105 00000097 6A0A                            push dword 10
   106 00000099 68[12000000]                    push dword format_chr
   107 0000009E FF15[00000000]                  call [printf]
   108 000000A4 83C408                          add esp, 8
   109                                          
   110                                          ; afisam nr de cifre
   111 000000A7 68[37000000]                    push dword text_cifre
   112 000000AC 68[0F000000]                    push dword format_str
   113 000000B1 FF15[00000000]                  call [printf]
   114 000000B7 83C408                          add esp, 8
   115                                          
   116 000000BA FF35[59000000]                  push dword [cifre]
   117 000000C0 68[0C000000]                    push dword format_dec
   118 000000C5 FF15[00000000]                  call [printf]
   119 000000CB 83C408                          add esp, 8
   120                                          
   121                                          ; inchidem fisierul
   122 000000CE FF35[15000000]                  push dword [descriptor_fis]
   123 000000D4 FF15[00000000]                  call [fclose]
   124 000000DA 83C404                          add esp, 4
   125                                          
   126                                          final:
   127                                          ; exit(0)
   128 000000DD 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   129 000000DF FF15[00000000]                  call    [exit]       ; call exit to terminate the program
